// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logger/logger.proto

package logger

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Severity int32

const (
	Severity_TRACE Severity = 0
	Severity_DEBUG Severity = 1
	Severity_INFO  Severity = 2
	Severity_WARN  Severity = 3
	Severity_ERROR Severity = 4
	Severity_FATAL Severity = 5
)

var Severity_name = map[int32]string{
	0: "TRACE",
	1: "DEBUG",
	2: "INFO",
	3: "WARN",
	4: "ERROR",
	5: "FATAL",
}

var Severity_value = map[string]int32{
	"TRACE": 0,
	"DEBUG": 1,
	"INFO":  2,
	"WARN":  3,
	"ERROR": 4,
	"FATAL": 5,
}

func (x Severity) String() string {
	return proto.EnumName(Severity_name, int32(x))
}

func (Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe9199f7f2bcaab7, []int{0}
}

type Log struct {
	Severity             Severity             `protobuf:"varint,1,opt,name=severity,proto3,enum=logger.Severity" json:"severity,omitempty"`
	Ts                   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
	Id                   string               `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	LogMessage           string               `protobuf:"bytes,4,opt,name=log_message,json=logMessage,proto3" json:"log_message,omitempty"`
	Tags                 map[string]string    `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9199f7f2bcaab7, []int{0}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetSeverity() Severity {
	if m != nil {
		return m.Severity
	}
	return Severity_TRACE
}

func (m *Log) GetTs() *timestamp.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *Log) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Log) GetLogMessage() string {
	if m != nil {
		return m.LogMessage
	}
	return ""
}

func (m *Log) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterEnum("logger.Severity", Severity_name, Severity_value)
	proto.RegisterType((*Log)(nil), "logger.Log")
	proto.RegisterMapType((map[string]string)(nil), "logger.Log.TagsEntry")
}

func init() {
	proto.RegisterFile("logger/logger.proto", fileDescriptor_fe9199f7f2bcaab7)
}

var fileDescriptor_fe9199f7f2bcaab7 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcd, 0x6a, 0xe3, 0x30,
	0x14, 0x85, 0xe3, 0xbf, 0x4c, 0x7c, 0x0d, 0x41, 0x68, 0x7e, 0x30, 0x9e, 0x45, 0x4c, 0x56, 0x9e,
	0x30, 0x38, 0xc5, 0x5d, 0xb4, 0x64, 0xe7, 0xb6, 0x4e, 0x69, 0x71, 0x13, 0x50, 0x5d, 0xba, 0x2c,
	0x0e, 0x51, 0x85, 0xa9, 0x1d, 0x05, 0x4b, 0x09, 0xe4, 0xbd, 0xfb, 0x00, 0xc5, 0x56, 0x1c, 0x4a,
	0xbb, 0xd2, 0xb9, 0xe7, 0x1e, 0x38, 0x9f, 0x24, 0xf8, 0x59, 0x72, 0xc6, 0x68, 0x3d, 0x55, 0x47,
	0xb8, 0xad, 0xb9, 0xe4, 0xb8, 0xaf, 0x26, 0xef, 0x2f, 0xe3, 0x9c, 0x95, 0x74, 0xda, 0xba, 0xab,
	0xdd, 0xeb, 0x94, 0x56, 0x5b, 0x79, 0x50, 0x21, 0x6f, 0xf4, 0x75, 0x29, 0x8b, 0x8a, 0x0a, 0x99,
	0x57, 0x5b, 0x15, 0x18, 0xbf, 0x6b, 0x60, 0xa4, 0x9c, 0xe1, 0xff, 0x30, 0x10, 0x74, 0x4f, 0xeb,
	0x42, 0x1e, 0x5c, 0xcd, 0xd7, 0x82, 0x61, 0x84, 0xc2, 0x63, 0xdd, 0xe3, 0xd1, 0x27, 0xa7, 0x04,
	0x9e, 0x80, 0x2e, 0x85, 0xab, 0xfb, 0x5a, 0xe0, 0x44, 0x5e, 0xa8, 0x3a, 0xc2, 0xae, 0x23, 0xcc,
	0xba, 0x0e, 0xa2, 0x4b, 0x81, 0x87, 0xa0, 0x17, 0x6b, 0xd7, 0xf0, 0xb5, 0xc0, 0x26, 0x7a, 0xb1,
	0xc6, 0x23, 0x70, 0x4a, 0xce, 0x5e, 0x2a, 0x2a, 0x44, 0xce, 0xa8, 0x6b, 0xb6, 0x0b, 0x28, 0x39,
	0x7b, 0x50, 0x0e, 0xfe, 0x07, 0xa6, 0xcc, 0x99, 0x70, 0x2d, 0xdf, 0x08, 0x9c, 0xe8, 0x77, 0x87,
	0x91, 0x72, 0x16, 0x66, 0x39, 0x13, 0xc9, 0x46, 0xd6, 0x07, 0xd2, 0x46, 0xbc, 0x0b, 0xb0, 0x4f,
	0x16, 0x46, 0x60, 0xbc, 0x51, 0x45, 0x6f, 0x93, 0x46, 0xe2, 0x5f, 0x60, 0xed, 0xf3, 0x72, 0x47,
	0x5b, 0x52, 0x9b, 0xa8, 0x61, 0xa6, 0x5f, 0x6a, 0x93, 0x7b, 0x18, 0x74, 0xd7, 0xc2, 0x36, 0x58,
	0x19, 0x89, 0xaf, 0x13, 0xd4, 0x6b, 0xe4, 0x4d, 0x72, 0xf5, 0x74, 0x8b, 0x34, 0x3c, 0x00, 0xf3,
	0x6e, 0x31, 0x5f, 0x22, 0xbd, 0x51, 0xcf, 0x31, 0x59, 0x20, 0xa3, 0x59, 0x27, 0x84, 0x2c, 0x09,
	0x32, 0x1b, 0x39, 0x8f, 0xb3, 0x38, 0x45, 0x56, 0x34, 0x83, 0x7e, 0xda, 0x22, 0xe2, 0x33, 0xf8,
	0x91, 0x72, 0x96, 0x16, 0x1b, 0x8a, 0x9d, 0x4f, 0xd8, 0xde, 0x9f, 0x6f, 0x4f, 0x94, 0x34, 0x7f,
	0x34, 0xee, 0xad, 0xfa, 0xad, 0x73, 0xfe, 0x11, 0x00, 0x00, 0xff, 0xff, 0x51, 0xe7, 0x8c, 0xcd,
	0xe2, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerClient interface {
	LogLine(ctx context.Context, in *Log, opts ...grpc.CallOption) (*empty.Empty, error)
}

type loggerClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggerClient(cc grpc.ClientConnInterface) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) LogLine(ctx context.Context, in *Log, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/logger.Logger/LogLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
type LoggerServer interface {
	LogLine(context.Context, *Log) (*empty.Empty, error)
}

// UnimplementedLoggerServer can be embedded to have forward compatible implementations.
type UnimplementedLoggerServer struct {
}

func (*UnimplementedLoggerServer) LogLine(ctx context.Context, req *Log) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogLine not implemented")
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_LogLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.Logger/LogLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogLine(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logger.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogLine",
			Handler:    _Logger_LogLine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logger/logger.proto",
}
